package utopia.genesis.handling.event.mouse

import MouseButton._
import utopia.flow.collection.immutable.caching.cache.Cache
import utopia.flow.operator.filter.{Filter, RejectAll}
import utopia.genesis.handling.event.consume.{Consumable, ConsumeEvent}
import utopia.genesis.handling.event.mouse.MouseEvent.MouseFilteringFactory
import utopia.paradigm.shape.shape2d.vector.point.RelativePoint

object MouseButtonStateEvent
{
    // TYPES    --------------------
    
    /**
      * Filter applied over mouse button state events
      */
    type MouseButtonStateEventFilter = Filter[MouseButtonStateEventLike[_]]
    
    
    // COMPUTED --------------------------
    
    /**
      * @return Access points for mouse button state event filters
      */
    def filter = MouseButtonStateEventFilter
    
    
    // OTHER    --------------------------
    
    /**
      * This filter only accepts button events where the mouse button was just pressed down
      */
    @deprecated("Please use .filter.pressed instead", "v4.0")
    def wasPressedFilter = filter.pressed
    /**
      * This filter only accepts button events where the mouse button was just released from down
      * state
      */
    @deprecated("Please use .filter.released instead", "v4.0")
    def wasReleasedFilter = filter.released
    
    /**
      * This filter only accepts events generated by left mouse button states
      */
    @deprecated("Please use .filter.left instead", "v4.0")
    def leftButtonFilter = filter.left
    /**
      * This filter only accepts events generated by left mouse button presses
      */
    @deprecated("Please use .filter.leftPressed instead", "v4.0")
    def leftPressedFilter = filter.leftPressed
    /**
      * This filter only accepts events generated by left mouse button releases
      */
    @deprecated("Please use .filter.leftReleased instead", "v4.0")
    def leftReleasedFilter = filter.leftReleased
    
    /**
      * This filter only accepts button events for the specific button index
      */
    @deprecated("Please use .filter.button(MouseButton) instead", "v4.0")
    def buttonFilter(buttonIndex: Int) = filter.apply(MouseButton(buttonIndex))
    /**
      * This filter only accepts button events for the specific mouse button
      */
    @deprecated("Please use .filter.button(MouseButton)  instead", "v4.0")
    def buttonFilter(button: MouseButton) = filter.apply(button)
    
    
    // NESTED   --------------------
    
    trait MouseButtonFilteringFactory[+E <: MouseButtonStateEventLike[_], +Repr] extends MouseFilteringFactory[E, Repr]
    {
        /**
          * @return A filter that only accepts button presses
          */
        def pressed = withFilter { _.pressed }
        /**
          * @return A filter that only accepts button releases
          */
        def released = withFilter { _.released }
        
        /**
          * @return An item that only accepts events concerning the left mouse button
          */
        def left = apply(MouseButton.Left)
        /**
          * @return An item that only accepts events concerning the right mouse button
          */
        def right = apply(MouseButton.Right)
        /**
          * @return An item that only accepts events concerning the middle mouse button
          */
        def middle = apply(MouseButton.Middle)
        
        /**
          * @return An item that only accepts events concerning left mouse button presses
          */
        def leftPressed = buttonPressed(MouseButton.Left)
        /**
          * @return An item that only accepts events concerning left mouse button releases
          */
        def leftReleased = buttonReleased(MouseButton.Left)
        /**
          * @return An item that only accepts events concerning right mouse button presses
          */
        def rightPressed = buttonPressed(MouseButton.Right)
        /**
          * @return An item that only accepts events concerning right mouse button releases
          */
        def rightReleased = buttonReleased(MouseButton.Right)
        
        /**
          * @param button Targeted mouse button
          * @return An item that only accepts events concerning that mouse button
          */
        def apply(button: MouseButton) = withFilter { _.button == button }
        /**
          * @param buttons Targeted mouse buttons
          * @return An item that only accepts events concerning those mouse buttons
          */
        def apply(buttons: Set[MouseButton]) = {
            if (buttons.isEmpty)
                withFilter(RejectAll)
            else
                withFilter { e => buttons.contains(e.button) }
        }
        /**
          * @return An item that only accepts events concerning the specified mouse buttons
          */
        def apply(button1: MouseButton, button2: MouseButton, more: MouseButton*): Repr =
            apply(Set(button1, button2) ++ more)
        
        /**
          * @param button Targeted button
          * @return An item that only accepts press events, and those only from the specified button
          */
        def buttonPressed(button: MouseButton) = buttonState(button, pressed = true)
        /**
          * @param button Targeted button
          * @return An item that only accepts release events, and those only from the specified button
          */
        def buttonReleased(button: MouseButton) = buttonState(button, pressed = false)
        /**
          * @param button Targeted button
          * @param pressed Required button state (true for pressed, false for released)
          * @return A filter that only accepts the specified state of the specified button
          */
        def buttonState(button: MouseButton, pressed: Boolean) =
            withFilter { e => e.button == button && e.pressed == pressed }
    }
    
    object MouseButtonStateEventFilter
        extends MouseButtonFilteringFactory[MouseButtonStateEventLike[_], MouseButtonStateEventFilter]
    {
        // ATTRIBUTES   ---------------------
        
        // Caches some often used filters
        private val buttonCache =
            Cache[MouseButton, MouseButtonStateEventFilter] { b: MouseButton =>
                Filter { e: MouseButtonStateEventLike[_] => e.button == b }
            }
        private val stateCache = Cache { state: Boolean => apply { _.pressed == state } }
        private val buttonStateCache = Cache { p: (MouseButton, Boolean) => buttonCache(p._1) && stateCache(p._2) }
        
        
        // IMPLEMENTED  ---------------------
        
        override protected def withFilter(filter: MouseButtonStateEventFilter): MouseButtonStateEventFilter = filter
        
        override def pressed = stateCache(true)
        override def released = stateCache(false)
        override def apply(button: MouseButton) = buttonCache(button)
        override def buttonState(button: MouseButton, pressed: Boolean) =
            buttonStateCache(button -> pressed)
        
        // OTHER    -------------------------
        
        /**
          * @param f A filter function for mouse button state events
          * @return A filter that uses the specified function
          */
        def apply(f: MouseButtonStateEventLike[_] => Boolean): MouseButtonStateEventFilter = Filter(f)
    }
}

/**
 * Mouse button events are generated whenever a mouse button state changes
  * (i.e. when a mouse button is pressed or released)
  * @param button The mouse button that triggered this event
  * @param position Current mouse coordinates
  * @param buttonStates Mouse button states immediately after this event
  * @param consumeEvent An event concerning this event's consuming. None if not consumed.
  * @param pressed Whether this button was pressed (true) or released (false)
 * @author Mikko Hilpinen
 * @since 17.2.2017
 */
case class MouseButtonStateEvent(override val button: MouseButton, override val position: RelativePoint,
                                 override val buttonStates: MouseButtonStates,
                                 override val consumeEvent: Option[ConsumeEvent], override val pressed: Boolean)
    extends MouseButtonStateEventLike[MouseButtonStateEvent] with Consumable[MouseButtonStateEvent]
{
    // COMPUTED PROPERTIES    ------------
    
    @deprecated("Please use .pressed instead", "v4.0")
    def isDown = pressed
    /**
      * @return Whether target mouse button is currently released / up
      */
    @deprecated("Please use .released instead", "v4.0")
    def isUp = !isDown
    /**
     * Whether the mouse button was just pressed down
     */
    @deprecated("Please use .pressed instead", "v4.0")
    def wasPressed = isDown
    /**
     * Whether the mouse button was just released from down state
     */
    @deprecated("Please use .released instead", "v4.0")
    def wasReleased = !isDown
    
    /**
      * @return Index of the button that triggered this event
      */
    @deprecated("Please use .button.index instead", "v4.0")
    def buttonIndex = button.index
    
    /**
     * Whether this event concerns the left mouse button
     */
    @deprecated("Please use .concernsLeft instead", "v4.0")
    def isLeftMouseButton = isMouseButton(Left)
    /**
     * Whether this event concerns the right mouse button
     */
    @deprecated("Please use .concernsRight instead", "v4.0")
    def isRightMouseButton = isMouseButton(Right)
    /**
     * Whether this event concerns the middle mouse button
     */
    @deprecated("Please use .concernsMiddle instead", "v4.0")
    def isMiddleMouseButton = isMouseButton(Middle)
    
    
    // IMPLEMENTED  ----------------------
    
    override def self = this
    
    override def toString = s"Mouse button $button was ${ if (pressed) "pressed" else "released" } at $position"
    
    override def consumed(event: ConsumeEvent) =
        if (isConsumed) this else copy(consumeEvent = Some(event))
    
    override def withPosition(position: RelativePoint): MouseButtonStateEvent = copy(position = position)
    
    
    // OTHER METHODS    ------------------
    
    /**
     * Checks whether this mouse event concerns the specified mouse button
     */
    @deprecated("Please use .concerns(MouseButton) instead", "v4.0")
    def isMouseButton(button: MouseButton) = concerns(button)
}