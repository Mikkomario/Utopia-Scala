{
  "project": "Project Name",
  "version": "v1.0",
  "author": "Author Name (optional)",
  "package": "com.company.project (use this OR model & db package separately)",
  "model_package": "com.company.project.model (optional)",
  "db_package": "com.company.project.db (optional)",
  "models_without_vault": false,
  "database": "database_name (optional)",
  "prefix_columns": false,
  "naming": {
    "sql": "underscore",
    "database_name": "underscore (or from sql)",
    "table": "underscore (or from sql)",
    "column": "underscore (or from sql)",
    "prop": "camelCase",
    "db_prop": "camelCase (or from prop)",
    "json": "camelCase",
    "doc": "text",
    "header": "Text (or from doc)",
    "file_name": "kebab",
    "class": "PascalCase",
    "enum": "PascalCase (or from class)",
    "enum_value": "PascalCase (or from enum)"
  },
  "types": {
    "CustomDataTypeName": {
      "type": "com.company.project.custom.GenericDataType[TypeParamName]",
      "sql": "INT",
      "from_value": {
        "code": "GenericDataType.fromValue($v).getOrElse(GenericDataType.default)",
        "references": ["com.company.project.custom.GenericDataType"]
      },
      "from_value_can_fail": false,
      "from_json_value": {
        "code": "GenericDataType.fromValue($v).getOrElse(GenericDataType.default) (optional)",
        "references": ["com.company.project.custom.GenericDataType"]
      },
      "from_json_value_can_fail": false,
      "option_from_value": {
        "code": "GenericDataType.fromValue($v)",
        "references": ["com.company.project.custom.GenericDataType"]
      },
      "option_from_json_value": {
        "code": "GenericDataType.fromValue($v) (optional)",
        "references": ["com.company.project.custom.GenericDataType"]
      },
      "to_value": {
        "code": "$v.index",
        "references": ["utopia.flow.generic.casting.ValueConversions._"]
      },
      "to_json_value": {
        "code": "$v.index (optional)",
        "references": ["utopia.flow.generic.casting.ValueConversions._"]
      },
      "option_to_value": {
        "code": "$v.map { _.index } (optional)",
        "references": ["utopia.flow.generic.casting.ValueConversions._"]
      },
      "option_to_json_value": {
        "code": "$v.map { _.index } (optional)",
        "references": ["utopia.flow.generic.casting.ValueConversions._"]
      },
      "empty": {
        "code": "GenericDataType.empty (optional)",
        "references": ["com.company.project.custom.GenericDataType"]
      },
      "default": {
        "code": "GenericDataType.default (optional)",
        "references": ["com.company.project.custom.GenericDataType"]
      },
      "sql_default": "0 (optional)",
      "prop_name": "customDataTypeName (default)",
      "col_suffix": "index (optional)",
      "index": false
    },
    "CustomMultiColumnDataTypeName": {
      "type": "com.company.project.custom.TypeName",
      "parts": [
        {
          "type": "Option[Int]",
          "sql": "INT",
          "extract": "Some($v.part1)",
          "extract_from_option": "$v.map { _.part1 }",
          "to_value": {
            "code": "$v (default)",
            "references": ["utopia.flow.generic.casting.ValueConversions._"]
          },
          "nullable": false,
          "empty": "None (default)",
          "sql_default": "0 (optional)",
          "index": false,
          "col_suffix": ""
        }
      ],
      "from_value": {
        "code": "TypeName($v1.getInt, $v2.getString)",
        "references": ["com.company.project.custom.TypeName"]
      },
      "from_value_can_fail": false,
      "option_from_value": {
        "code": "$v1.int.flatMap { part1 => $v2.string.map { part2 => TypeName(part1, part2) } }",
        "references": ["com.company.project.custom.TypeName"]
      },
      "to_value": {
        "code": "$v.part2 + $v.part1",
        "references": ["utopia.flow.generic.casting.ValueConversions._"]
      },
      "option_to_value": {
        "code": "$v.map { v => v.part2 + v.part1 }",
        "references": ["utopia.flow.generic.casting.ValueConversions._"]
      },
      "empty": {
        "code": "TypeName.empty (optional)",
        "references": ["com.company.project.custom.TypeName"]
      },
      "default": {
        "code": "TypeName.default (optional)",
        "references": ["com.company.project.custom.TypeName"]
      },
      "prop_name": "customMultiColumnDataTypeName (default)"
    }
  },
  "enums": [
    {
      "name": "EnumerationName",
      "id_name": "id (default)",
      "id_type": "Int (default)",
      "values": [
        {
          "name": "EnumValue1",
          "id": "1 (default)",
          "doc": "Value description"
        }
      ],
      "default": "EnumValue1 (optional)",
      "package": "com.company.project.model.enumeration (optional)",
      "doc": "Enumeration description"
    }
  ],
  "referenced_enums": ["com.company.project2.model.enumeration.EnumerationName"],
  "classes": {
    "packageName": [
      {
        "name": "ClassName",
        "name_plural": "ClassNames (default)",
        "table": "class_name (default)",
        "id": "id (default)",
        "use_long_id": false,
        "description_link": "classNameId (optional)",
        "described": true,
        "doc": "Class description",
        "author": "Author Name (optional)",
        "combos": [
          {
            "name": "OneOnOneComboName",
            "name_plural": "OneOnOneComboNames (default)",
            "child": "ClassName2",
            "is_always_linked": false,
            "parent_alias": "className (default)",
            "child_alias": "className2 (default)",
            "doc": "Combo description"
          },
          {
            "name": "OneToManyComboName",
            "children": "ClassName2s",
            "is_always_linked": false,
            "parent_alias": "className (default)",
            "child_alias": "className2s (default)",
            "doc": "Combo description"
          }
        ],
        "has_combos": true,
        "combo_indices": [["propName1", "propName2", "propName3"]],
        "props": [
          {
            "name": "propertyName",
            "name_plural": "propertyNames (default)",
            "ref": "table_name(id (default)) (optional)",
            "type": "Option[Int(99)] (see README for options)",
            "index": false,
            "length": 99,
            "limit": "expand to 999 or crop",
            "default": {
              "code": "Fancy.default",
              "references": ["com.company.project.something.Fancy"]
            },
            "sql_default": "0 (optional)",
            "doc": "Property description"
          },
          {
            "name": "multiColumnPropertyName",
            "type": "CustomMultiColumnDataTypeName",
            "parts": [
              {
                "name": "subPropertyName1",
                "column": "sub_property_name_1 (default)",
                "index": true,
                "limit": "throw (default)",
                "sql_default": "default value (optional)"
              }
            ]
          }
        ],
        "instances": [
          {
            "id": 1,
            "propertyName": 99,
            "multiColumnPropertyName": null
          }
        ]
      }
    ]
  }
}