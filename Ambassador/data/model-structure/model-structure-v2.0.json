{
  "author": "Mikko Hilpinen",
  "project": "Ambassador",
  "version": "v2.0",
  "package": "utopia.ambassador",
  "classes": {
    "service": [
      {
        "name": "AuthService",
        "table_name": "oauth_service",
        "combo": {
          "name": "AuthServiceWithSettings",
          "child": "AuthServiceSettings",
          "is_always_linked": true,
          "parent_alias": "service",
          "child_alias": "settings"
        },
        "doc": "Represents a service that provides an OAuth interface (e.g. Google)",
        "props": [
          {
            "name": "name",
            "length": 64,
            "index": true,
            "doc": "Name of this service (from the customer's perspective)"
          },
          {
            "type": "creation",
            "index": false
          }
        ]
      },
      {
        "name": "AuthServiceSettings",
        "name_plural": "AuthServiceSettings",
        "table_name": "oauth_service_settings",
        "doc": "Specifies service-specific settings. It is recommended to have only one instance per service.",
        "props": [
          {
            "name": "serviceId",
            "ref": "oauth_service",
            "doc": "Id of the described service"
          },
          {
            "name": "clientId",
            "length": 128,
            "doc": "Id of this client in the referenced service"
          },
          {
            "name": "clientSecret",
            "length": 128,
            "doc": "This application's password to the referenced service"
          },
          {
            "name": "authenticationUrl",
            "length": 128,
            "doc": "Url to the endpoint that receives users for the OAuth process"
          },
          {
            "name": "tokenUrl",
            "length": 128,
            "doc": "Url to the endpoint that provides refresh and session tokens"
          },
          {
            "name": "redirectUrl",
            "length": 128,
            "doc": "Url to the endpoint in this application which receives the user after they've completed the OAuth process"
          },
          {
            "name": "incompleteAuthRedirectUrl",
            "length": 255,
            "type": "Option[String]",
            "doc": "Url on the client side (front) that receives the user when they arrive from an OAuth process that was not initiated in this application. None if this use case is not supported."
          },
          {
            "name": "defaultCompletionRedirectUrl",
            "length": 255,
            "type": "Option[String]",
            "doc": "Url on the client side (front) where the user will be redirected upon authentication completion. Used if no redirect urls were prepared by the client."
          },
          {
            "name": "preparationTokenDuration",
            "column_name": "preparation_token_duration_minutes",
            "type": "Duration[Minute]",
            "default": "5.minutes",
            "sql_default": 5,
            "doc": "Duration how long preparation tokens can be used after they're issued before they expire"
          },
          {
            "name": "redirectTokenDuration",
            "column_name": "redirect_token_duration_minutes",
            "type": "Duration[Minute]",
            "default": "15.minutes",
            "sql_default": 15,
            "doc": "Duration how long redirect tokens can be used after they're issued before they expire"
          },
          {
            "name": "incompleteAuthTokenDuration",
            "column_name": "incomplete_auth_token_duration_minutes",
            "type": "Duration[Minute]",
            "default": "30.minutes",
            "sql_default": 30,
            "doc": "Duration how long incomplete authentication tokens can be used after they're issued before they expire"
          },
          {
            "name": "defaultSessionDuration",
            "column_name": "default_session_duration_minutes",
            "type": "Duration[Minute]",
            "default": "22.hours",
            "sql_default": 1320
          },
          {
            "type": "creation"
          }
        ]
      }
    ],
    "scope": [
      {
        "name": "Scope",
        "table_name": "oauth_scope",
        "description_link": "scope_id",
        "combos": [
          {
            "name": "TaskScope",
            "child": "TaskScopeLink",
            "is_always_linked": true,
            "child_alias": "taskLink"
          },
          {
            "name": "AuthPreparationScope",
            "child": "AuthPreparationScopeLink",
            "is_always_linked": true,
            "child_alias": "preparationLink"
          },
          {
            "name": "AuthTokenScope",
            "child": "AuthTokenScopeLink",
            "is_always_linked": true,
            "child_alias": "tokenLink"
          }
        ],
        "doc": "Scopes are like access rights which can be requested from 3rd party services. They determine what the application is allowed to do in behalf of the user.",
        "props": [
          {
            "name": "serviceId",
            "ref": "oauth_service",
            "doc": "Id of the service this scope is part of / which uses this scope"
          },
          {
            "name": "name",
            "length": 255,
            "index": true,
            "doc": "Name of this scope in the 3rd party service"
          },
          {
            "name": "priority",
            "name_plural": "priorityLevels",
            "type": "Option[Int]",
            "doc": "Priority assigned for this scope where higher values mean higher priority. Used when multiple scopes can be chosen from."
          },
          {
            "type": "creation",
            "index": false
          }
        ]
      },
      {
        "name": "TaskScopeLink",
        "table_name": "task_scope",
        "doc": "Links tasks with the scopes that are required to perform them",
        "props": [
          {
            "ref": "task",
            "doc": "Id of the linked task"
          },
          {
            "name": "scopeId",
            "ref": "oauth_scope",
            "doc": "Id of the scope required to perform the task"
          },
          {
            "name": "isRequired",
            "name_plural": "areRequired",
            "type": "boolean",
            "doc": "True whether this scope is always required to perform the linked task. False whether this scope can be replaced with another optional scope."
          },
          {
            "type": "creation",
            "index": false
          }
        ]
      }
    ],
    "process": [
      {
        "name": "AuthPreparation",
        "table_name": "oauth_preparation",
        "combo_index": ["expires", "token"],
        "doc": "Used for preparing and authenticating an OAuth process that follows",
        "props": [
          {
            "ref": "user",
            "doc": "Id of the user who initiated this process"
          },
          {
            "name": "token",
            "length": 64,
            "doc": "Token used for authenticating the OAuth redirect"
          },
          {
            "type": "expiration",
            "doc": "Time when this authentication (token) expires"
          },
          {
            "name": "clientState",
            "length": 2048,
            "type": "Option[String]",
            "doc": "Custom state given by the client and sent back upon user redirect"
          },
          {
            "type": "creation"
          }
        ]
      },
      {
        "name": "AuthPreparationScopeLink",
        "table_name": "oauth_preparation_scope",
        "doc": "Links a requested scope to an OAuth preparation",
        "props": [
          {
            "name": "preparationId",
            "ref": "oauth_preparation",
            "doc": "Id of the described OAuth preparation"
          },
          {
            "name": "scopeId",
            "ref": "oauth_scope",
            "doc": "Id of the requested scope"
          }
        ]
      },
      {
        "name": "AuthCompletionRedirectTarget",
        "table_name": "oauth_completion_redirect_target",
        "combo_index": ["resultStateFilter", "isLimitedToDenials"],
        "doc": "Used for storing client-given rules for redirecting the user after the OAuth process completion. Given during the OAuth preparation.",
        "props": [
          {
            "name": "preparationId",
            "ref": "oauth_preparation",
            "doc": "Id of the preparation during which these targets were specified"
          },
          {
            "name": "url",
            "length": 255,
            "doc": "Url where the user will be redirected"
          },
          {
            "name": "resultStateFilter",
            "type": "Option[Boolean]",
            "doc": "True when only successes are accepted. False when only failures are accepted. None when both are accepted."
          },
          {
            "name": "isLimitedToDenials",
            "name_plural": "areLimitedToDenials",
            "type": "boolean",
            "doc": "Whether this target is only used for denial of access -cases"
          }
        ]
      },
      {
        "name": "AuthRedirect",
        "table_name": "oauth_redirect",
        "doc": "Records each event when a user is directed to the 3rd party OAuth service. These close the linked preparations.",
        "props": [
          {
            "name": "preparationId",
            "ref": "oauth_preparation",
            "doc": "Id of the preparation event for this redirection"
          },
          {
            "name": "token",
            "length": 64,
            "index": true
          },
          {
            "type": "expiration",
            "doc": "Time when the linked redirect token expires"
          },
          {
            "type": "creation"
          }
        ]
      },
      {
        "name": "AuthRedirectResult",
        "table_name": "oauth_redirect_result",
        "doc": "Records the cases when the user arrives back from the 3rd party OAuth service, whether the authentication succeeded or not.",
        "props": [
          {
            "name": "redirectId",
            "ref": "oauth_redirect",
            "doc": "Id of the redirection event this result completes"
          },
          {
            "name": "didReceiveCode",
            "type": "boolean",
            "doc": "Whether an authentication code was included in the request (implies success)"
          },
          {
            "name": "didReceiveToken",
            "type": "boolean",
            "doc": "Whether authentication tokens were successfully acquired"
          },
          {
            "type": "creation"
          }
        ]
      },
      {
        "name": "IncompleteAuth",
        "table_name": "incomplete_oauth",
        "doc": "Represents a case where a user arrives from a 3rd party service without first preparing an authentication on this side",
        "props": [
          {
            "name": "serviceId",
            "ref": "oauth_service",
            "doc": "Id of the service from which the user arrived"
          },
          {
            "name": "code",
            "length": 255,
            "doc": "Authentication code provided by the 3rd party service"
          },
          {
            "name": "token",
            "length": 64,
            "index": true,
            "doc": "Token used for authentication the completion of this authentication"
          },
          {
            "type": "expiration",
            "doc": "Time after which the generated authentication token is no longer valid"
          },
          {
            "type": "creation"
          }
        ]
      },
      {
        "name": "IncompleteAuthLogin",
        "table_name": "incomplete_oauth_login",
        "doc": "Records cases where incomplete authentications are completed with the user logging in",
        "props": [
          {
            "name": "authId",
            "ref": "incomplete_oauth",
            "doc": "Id of the incomplete authentication this login completes"
          },
          {
            "ref": "user",
            "doc": "Id of the user who logged in"
          },
          {
            "type": "creation"
          },
          {
            "name": "wasSuccess",
            "name_plural": "wereSuccesses",
            "type": "boolean",
            "doc": "Whether authentication tokens were successfully acquired from the 3rd party service"
          }
        ]
      }
    ],
    "token": [
      {
        "name": "AuthToken",
        "table_name": "oauth_token",
        "combo_index": ["deprecatedAfter", "expires", "isRefreshToken"],
        "doc": "Tokens (both access and refresh) used for authenticating 3rd party requests",
        "props": [
          {
            "ref": "user",
            "doc": "Id of the user who owns this token / to whom this token is linked"
          },
          {
            "name": "token",
            "length": 2048,
            "doc": "Textual representation of this token"
          },
          {
            "name": "expires",
            "name_plural": "expirationTimes",
            "type": "Option[datetime]",
            "index": false,
            "doc": "Time when this token can no longer be used, if applicable"
          },
          {
            "type": "creation",
            "doc": "Time when this token was acquired / issued"
          },
          {
            "type": "deprecation",
            "doc": "Time when this token was cancelled, revoked or replaced"
          },
          {
            "name": "isRefreshToken",
            "name_plural": "areRefreshTokens",
            "type": "boolean",
            "doc": "Whether this is a refresh token which can be used for acquiring access tokens"
          }
        ]
      },
      {
        "name": "AuthTokenScopeLink",
        "table_name": "oauth_token_scope",
        "doc": "Used for listing, which scopes are available based on which authentication token",
        "props": [
          {
            "name": "tokenId",
            "ref": "oauth_token",
            "doc": "Id of the token that provides access to the linked scope"
          },
          {
            "name": "scopeId",
            "ref": "oauth_scope",
            "doc": "Id of the scope that is accessible by using the linked token"
          }
        ]
      }
    ]
  }
}